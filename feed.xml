<?xml version="1.0" encoding="UTF-8"?>
<rss xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:atom="http://www.w3.org/2005/Atom" version="2.0">
  <channel>
      <title><![CDATA[ Sgoettschkes.me ]]></title>
      <description><![CDATA[ Personal blog and website by Sebastian G√∂ttschkes, known as Sgoettschkes. Blogging about all things tech, mostly software engineering and DevOps. ]]></description>
      <link>https://sgoettschkes.me/</link>
      <generator>Still</generator>
      <lastBuildDate>Mon, 07 Apr 2025 05:28:24 +0000</lastBuildDate>
      <atom:link href="https://sgoettschkes.me/feed.xml" rel="self" type="application/rss+xml" />
      <author><![CDATA[ Sebastian G√∂ttschkes ]]></author>
      <ttl>60</ttl>
      
        <item>
            <title><![CDATA[ Building OneSen in public ]]></title>
            <description><![CDATA[ <p><img src="/img/2024-01-01-building-onesen-in-public.png" alt="A unique visual representation of the &#39;OneSen&#39; note-taking app" title="A unique visual representation of the 'OneSen' note-taking app"></p><p>It‚Äôs been a while since I posted on my blog. Almost two years, to be precise. I was focusing my energy on other parts of my life, and, to be honest, I never got back into publishing regular blog posts after falling off the wagon in 2017. But now I am back, and I intend to publish more often.</p><h2>Building OneSen</h2><p>Last week, I started a new side project. It‚Äôs called OneSen, and currently, it‚Äôs a text field you can use to store your daily notes. In the future, I envision it to be a note-taking app focusing on daily notes (much like micro-blogging) and simplicity. I also have ideas to add the capabilities of LLMs to enrich the experience and get insights into your notes. The alpha version, without a design, text, or explanations, can be found at <a href="https://onesen.app">https://onesen.app</a>. But it works üòâ</p><h2>Build in public</h2><p>My current plan is to build this app in public. I like the idea of (radical) transparency, which is present when being open about everything happening. I like to teach others what works for me and what doesn‚Äôt. I like to inspire others to build something on their own, make their work more public, or share more. We can all benefit from the experiences others have already had.</p><h2>The idea</h2><p>To be transparent, I have to give credit where credit is due. The idea for OneSen came from Dainius, who mentioned that he‚Äôd like a straightforward interface to take notes and have them stored daily, much like a physical notebook with its pages dedicated to a specific date.</p><p>I let the idea sit, and because I thought about it more over time, I decided to act on it. I kept the notebook analogy since the concept closely relates to physical notebooks. Currently, each notebook contains pages, one page for each day. A user can only change the current day, and the system saves changes automatically when the text changes. It‚Äôs as easy as possible. Go to your notebook, write something, and leave.</p><h2>The MVP</h2><p>My current plan for the MVP is to add a design, make it possible to view past dates and rename notebooks. Those changes should be enough to make it usable and see if people want something like this. </p><h2>The long term vision</h2><p>OneSen could go in many directions. One idea I had was the ‚ÄúOne second a day‚Äù video app for writing. Write something daily and combine it per week, month, or year.</p><p>Another idea was to add LLM capabilities, analyze notes, and gather insights using AI. This feature could be interesting for people writing morning pages or journals.</p><p>I am also thinking about encrypting notes on the client, adding security that almost no other note-taking app has. The drawback would be that working with notes would need to happen on the client since even searching would not be possible with encrypted notes.</p> ]]></description>
            <pubDate>Sun, 01 Jan 2023 16:45:00 +0000</pubDate>
            <link>https://sgoettschkes.me/p/building-onesen-in-public.html</link>
            <guid isPermaLink="true">https://sgoettschkes.me/p/building-onesen-in-public.html</guid>
            <category><![CDATA[ dev ]]></category>
            <dc:creator><![CDATA[ Sebastian ]]></dc:creator>
        </item>
      
        <item>
            <title><![CDATA[ Phoenix UI testing with Cypress, Part 1 ]]></title>
            <description><![CDATA[ <p>I still remember the days I tried to achieve UI testing with Selenium, PhantomJS and various other tools. It was a hassle. It didn‚Äôt run on CI because it needed some kind of window manager. It was unstable.</p><h2>Introducing Cypress</h2><p>Cypress has solved these issues, hiding the complexity of UI testing and leaving you with the task of writing the tests. It comes with it‚Äôs own UI where you can run tests and see what the test does in realtime. Cypress can do screenshots, videos of the tests and more.</p><p>In this tutorial, we‚Äôll mostly use <code class="inline">cypress run</code>. This command acts like <code class="inline">mix test</code> does: Running your tests and displaying the result within your terminal window. I encourage you to check out the other features of Cypress on your own.</p><h2>Cypress Setup</h2><p>I assume you have an existing Elixir/Phoenix project you want to start using Cypress with. Your frontend files are located at <code class="inline">assets/</code> while your elixir tests are stored within <code class="inline">test/</code>. </p><p>To install Cypress, we use npm: <code class="inline">cd assets/ &amp;&amp; npm install cypress --save-dev</code>. Cypress installs itself and is afterwards available as a command line tool at <code class="inline">assets/node_modules/cypress/bin/cypress</code>.</p><p>Cypress by default expects all test files and support files to be located at <code class="inline">cypress/</code>. I‚Äôd argue a much better place for these files is in <code class="inline">test/cypress</code>, so this is where we‚Äôre going to place them. If you like your Cypress tests to live someplace else, you‚Äôll find this guide helpful to figure out which adjustments you need to make.</p><h2>Config and support files</h2><p>Let‚Äôs start with the config file <code class="inline">cypress.json</code> in your root directory:</p><pre><code class="json">{
  &quot;componentFolder&quot;: false,
  &quot;downloadsFolder&quot;: &quot;tmp/cypress/downloads&quot;,
  &quot;fixturesFolder&quot;: &quot;test/cypress/fixtures&quot;,
  &quot;integrationFolder&quot;: &quot;test/cypress/integration&quot;,
  &quot;pluginsFile&quot;: false,
  &quot;screenshotOnRunFailure&quot;: false,
  &quot;screenshotsFolder&quot;: &quot;tmp/cypress/screenshots&quot;,
  &quot;supportFile&quot;: false,
  &quot;testFiles&quot;: &quot;**/*.*&quot;,
  &quot;video&quot;: false,
  &quot;videosFolder&quot;: &quot;tmp/cypress/videos&quot;
}</code></pre><p>As you can see, we overwrite all folders, either pointing to <code class="inline">test/cypress</code> or <code class="inline">tmp/cypress</code> (for files to be ignored). We also don‚Äôt use support files or plugins and deactivate screenshots and videos.</p><h2>The first test</h2><p>Now it‚Äôs time to write the first test, a simple request to our homepage. Tests for Cypress are placed in the integrations folder which means creating the file <code class="inline">test/cypress/integration/index_spec.js</code>:</p><pre><code class="js">describe(&#39;Homepage&#39;, () =&gt; {
  it(&#39;Visit homepage without interaction&#39;, () =&gt; {
    cy.visit(&#39;http://localhost:4000/&#39;)
  })
})</code></pre><p>You can run this test using the command <code class="inline">./assets/node_modules/cypress/bin/cypress run</code> but it will fail if your Phoenix server does not run. Try it again after starting the server with <code class="inline">mix phx.serer</code> in another terminal window.</p><h2>The All-in-one shell file</h2><p>We want to run the tests with one command, both locally and on a CI server. I used the shell script suggested by <a href="https://www.alanvardy.com/post/phoenix-cypress-tests">https://www.alanvardy.com/post/phoenix-cypress-tests</a> and modified them a bit. Create a file <code class="inline">cypress-run.sh</code>, make it executable (<code class="inline">chmod +x cypress-run.sh</code>) and put the following code into it:</p><pre><code class="sh"> #!/bin/sh

MIX_ENV=cypress mix ecto.reset
echo &quot;===STARTING PHX SERVER===&quot;
echo &quot;===IF STARTING CYPRESS FAILS===&quot;
echo &quot;===RUN npm install cypress --save-dev ===&quot;
echo &quot;===IN THE assets/ FOLDER===&quot;
MIX_ENV=cypress mix phx.server &amp;
pid=$! # Store server pid
echo &quot;===WAITING FOR PHX SERVER===&quot;
until $(curl --output /dev/null --silent --head --fail http://localhost:4002); do
    printf &#39;.&#39;
    sleep 5
done
echo &quot;&quot;
echo &quot;===PHX SERVER RUNNING===&quot;
echo &quot;===STARTING CYPRESS===&quot;
./assets/node_modules/.bin/cypress run
result=$?
kill -9 $pid # kill server
echo &quot;===KILLING PHX SERVER===&quot;
exit $result</code></pre><p>As you might have noticed, the <code class="inline">MIX_ENV</code> is set to <code class="inline">cypress</code>. To create this env, we need the new configuration file <code class="inline">config/cypress.exs</code>:</p><pre><code class="elixir">use Mix.Config

# Configure your database
config :phonix, Phonix.Repo,
  username: &quot;postgres&quot;,
  password: &quot;postgres&quot;,
  database: &quot;phonix_cypress&quot;,
  hostname: &quot;localhost&quot;,
  pool_size: 10

config :phonix, PhonixWeb.Endpoint,
  http: [port: 4002],
  server: true

# Print only warnings and errors during test
config :logger, level: :warn</code></pre><p>This approach is also copied from <a href="https://www.alanvardy.com/post/phoenix-cypress-tests">https://www.alanvardy.com/post/phoenix-cypress-tests</a>. It‚Äôs a great idea to separate the test environment from the ui test environment. As Alan suggests, you could use a tool like <code class="inline">ex_check</code> which can run your normal tests and your ui tests in parallel, which is only possible if you use different databases and thus different environments.</p><p>We are using a different port in the cypress env (<code class="inline">4002</code>), so make sure to adjust your tests accordingly.</p><p>Now you can run your UI tests by executing <code class="inline">./cypress-run.sh</code>. This script should run on your CI environment as well as locally. Just make sure to run <code class="inline">npm install</code> in your CI run!</p><h2>What else?</h2><p>I intend to write a second part, figuring out how to use fixtures or reset the database between tests. I saw a few blog posts on how to do this, utilizing sockets in phoenix to take commands. I don‚Äôt really like the approach and might come up with a way to work with the database directly. We‚Äôll see!</p> ]]></description>
            <pubDate>Wed, 03 Feb 2021 17:30:00 +0000</pubDate>
            <link>https://sgoettschkes.me/p/phoenix-testing-with-cypress.html</link>
            <guid isPermaLink="true">https://sgoettschkes.me/p/phoenix-testing-with-cypress.html</guid>
            <category><![CDATA[ dev ]]></category>
            <dc:creator><![CDATA[ Sebastian ]]></dc:creator>
        </item>
      
        <item>
            <title><![CDATA[ Quickstart guide for clojure (compojure), clojurescript (figwheel), garden ]]></title>
            <description><![CDATA[ <p>Setting up new projects is always exciting, but if you have done it a few times, it‚Äôs getting old quick. I have set up a few projects in the last time and I believe I have a nice setup going which I‚Äôm about to share with everybody interested. There is nothing new in here and if you are a seasoned Clojure developer, you might not learn much. If you are just starting out or have some work done in Clojure but need a working setup or some input on your current setup, you are at the right place.</p><p>All my projects live insight Vagrant virtual machines. I‚Äôll be using Clojure with Compojure and Ring, Clojurescript with figwheel and garden. I‚Äôm also throwing in the cooper library.</p><h2>Clojure</h2><p>All my web Clojure projects include <code class="inline">compojure</code> and the <code class="inline">lein-ring</code> plugin. Both are mature and work very well, so I didn‚Äôt look any further. My project.clj at this point looks like:</p><pre><code>(defproject mycompany/myproject &quot;0.1.0&quot;
  :dependencies [[compojure &quot;1.6.0&quot;]
                 [org.clojure/clojure &quot;1.8.0&quot;]]
  :main myproject.core
  :min-lein-version &quot;2.0.0&quot;
  :plugins [[lein-ring &quot;0.12.1&quot;]]
  :ring {:auto-reload? true
         :handler myproject.core/app
         :open-browser? false
         :reload-paths [&quot;src/&quot; &quot;resources/&quot;]}
  :source-paths [&quot;src/clj&quot;])</code></pre><p>The ring setup is important as it allows for auto-recompiling when run through <code class="inline">lein ring server</code>. <code class="inline">open-browser</code> is there because I run the project inside a vm, so there is no browser to open and instead of remembering to run <code class="inline">lein ring server-headless</code> every time, I disable it altogether.</p><h1>ClojureScript</h1><p>Adding Clojurescript is just a dependency away, especially if you don‚Äôt start with figwheel and other libraries but keep it plain and simple:</p><pre><code>(defproject mycompany/myproject &quot;0.1.0&quot;
  :cljsbuild {:builds [{:source-paths [&quot;src/cljs&quot;]
                        :compiler {:optimizations :whitespace
                                   :output-to &quot;resources/public/js/main.js&quot;
                                   :output-dir &quot;resources/public/js&quot;}}]}
  :dependencies [[compojure &quot;1.6.0&quot;]
                 [org.clojure/clojure &quot;1.8.0&quot;]
                 [org.clojure/clojurescript &quot;1.9.946&quot;]
                 [ring/ring-core &quot;1.6.2&quot;]
                 [selmer &quot;1.11.2&quot;]]
  :main myproject.core
  :min-lein-version &quot;2.0.0&quot;
  :plugins [[lein-cljsbuild &quot;1.1.7&quot;]
            [lein-ring &quot;0.12.1&quot;]]
  :resource-paths [&quot;resources&quot;]
  :ring {:auto-reload? true
         :handler myproject.core/app
         :open-browser? false
         :reload-paths [&quot;src/&quot; &quot;resources/&quot;]}
  :source-paths [&quot;src/clj&quot;])</code></pre><p><code class="inline">lein-cljsbuild</code> helps transpiling ClojureScript to Javascript by running <code class="inline">lein cljsbuild once</code> or <code class="inline">lein cljsbuild auto</code>.</p><h2>Garden</h2><p>I usually try to stick with the choices popular within the ecosystem. I have used Sass and Less in the past and was fine with both. Garden is another CSS precompiler, but you write your CC as Clojure data structures, making it easy to integrate it within the ecosystem. There is nothing wrong with using another precompiler for CSS or write plain CSS if the project calls for it.</p><p>For garden, you only need the dependency <code class="inline">[garden &quot;1.3.3&quot;]</code> as well as the plugin <code class="inline">[lein-garden &quot;0.3.0&quot;]</code>. After that, adding the garden config to your project.clj works like this:</p><pre><code>  :garden {:builds [{:id &quot;screen&quot;
                     :source-paths [&quot;src/garden&quot;]
                     :stylesheet myproject.core/main
                     :compiler {:output-to &quot;resources/public/css/main.css&quot;
                                :pretty-print? false}}]}</code></pre><p>As you can see, the garden source code goes into <code class="inline">src/garden</code>. Within <code class="inline">src</code>, there is also <code class="inline">clj</code> and <code class="inline">cljs</code> to split up the different parts (backend, frontend, CSS).</p><h2>Figwheel</h2><p>We glanced over figwheel when setting up ClojureScript. If you would stop right now and would start working on your project, you‚Äôd need to wait for the ClojureScript compiler to generate the js on every change, than reload the website, navigate where you left of and look at your changed.</p><p>With figwheel, only the part of your ClojureScript app that changed get recompiled and these parts get pushed to the browser directly which in turns exchanges the code parts so you see the changes directly.</p><p>With all this going on, figwheel was the first hurdle for me. Adding it was straightforward by adding <code class="inline">[lein-figwheel &quot;0.5.14&quot;]</code> to the plugin section of the project.clj. After the, the <code class="inline">cljsbuild</code> config needed to be changed:</p><pre><code>  :cljsbuild {:builds [{:compiler {:asset-path &quot;js/out&quot;
                                   :main &quot;myproject.core&quot;
                                   :optimizations :none
                                   :output-to &quot;resources/public/js/main.js&quot;
                                   :output-dir &quot;resources/public/js/out&quot;}
                        :figwheel {:websocket-host &quot;myproject.local&quot;}
                        :id &quot;dev&quot;
                        :source-paths [&quot;src/cljs&quot;]}]}</code></pre><p>The <code class="inline">websocket-host</code> was needed because of the vm. I run the project through a hostname and not by mapping localhost ports. The second thing needed was the figwheel config itself:</p><pre><code>  :figwheel {:css-dirs [&quot;resources/public/css&quot;]
             :hawk-options {:watcher :polling}
             :ring-handler myproject.core/app
             :server-port 3000}</code></pre><p><code class="inline">css-dirs</code> is important to have hot code reloading for CSS as well. The <code class="inline">hawk-options</code> is needed because of the vm (again), as figwheel does not detect code changes (due to the way Vagrant mounts folders). By adding the <code class="inline">ring-handler</code>, the ring server is run when running figwheel, making it easier than running both processes in parallel.</p><h2>Bonus points: Cooper</h2><p>The next thing for me was to not have the need to run both <code class="inline">lein figwheel</code> and <code class="inline">lein garden auto</code> in two different shells. Luckily, there is <code class="inline">cooper</code>, which can be used to run many tasks in parallel. Add the lein plugin and a small config, and you are good to go:</p><pre><code>  :cooper {&quot;figwheel&quot;  [&quot;lein&quot; &quot;figwheel&quot;]
           &quot;garden&quot; [&quot;lein&quot; &quot;garden&quot; &quot;auto&quot;]}</code></pre><p>After that, <code class="inline">lein cooper figwheel garden</code> got you covered.</p><h2>Follow along</h2><p>If you want to see this changes in full (without cooper right now), go over to <a href="https://github.com/Sgoettschkes/web-clj">https://github.com/Sgoettschkes/web-clj</a> and step through the commits. You can see every code change in detail much better than I would ever be able to outline in this blog.</p><p>I‚Äôll also be adding more (and writing a second blog post) on testing Clojure and ClojureScript as well as adding some example code to the repo. Stay tuned!</p><p>I‚Äôm also looking for feedback towards my setup, both in terms if libraries I used and the ways I plugged them together. You can either comment here, add an issue to the github repo or find me on social media as well as send me an email.</p> ]]></description>
            <pubDate>Fri, 03 Nov 2017 14:00:00 +0000</pubDate>
            <link>https://sgoettschkes.me/p/quickstart-guide-for-clojure-compojure-clojurescript-figwheel-garden.html</link>
            <guid isPermaLink="true">https://sgoettschkes.me/p/quickstart-guide-for-clojure-compojure-clojurescript-figwheel-garden.html</guid>
            <category><![CDATA[ dev ]]></category>
            <dc:creator><![CDATA[ Sebastian ]]></dc:creator>
        </item>
      
        <item>
            <title><![CDATA[ My personal state of Clojure ]]></title>
            <description><![CDATA[ <p>Almost a year ago I wrote my last blog post on this blog. It wasn‚Äôt planned, it just happened. I was busy doing other, unrelated things and while I sometimes had something to say, I never took the time to take it to my blog. As with many things which are not top priority, it got lost along the way.</p><p>As a comeback, I figured a personal look into Clojure might be interesting for some. Let‚Äôs go!</p><h2>One year with Clojure</h2><p>We started using Clojure for a new project (green-field, as some might say) at Blossom. We are building the project alongside running Blossom and other projects, which means progress is naturally slow. We also decided to look into Datomic as well, harming progress even further. But while we removed Datomic from our stack again, we keep Clojure and Clojurescript. Getting used to Clojure and Clojurescript took some times as well but now I feel good about the way I write code and I grew to like it a lot. I still got much to learn, but that‚Äôs ok as I like learning new things. Beside work, I used Clojure for 3 side projects (a Chatbot, a article-based website and a map-based web app).</p><h2>Clojure as a language</h2><p>I have worked with many languages over the years. Clojure feels more mature than many other ‚Äúsmall‚Äù languages, both the language itself as well as the ecosystem. Leiningen is a great tool for managing dependencies and to buid your project. Built on top of the JVM means that running the application in production is possible everywhere where you‚Äôd be able to run Java applications.</p><p>After some time to get used to the Clojure way, I am very fast implementing features in Clojure. Having the codebase split up into many small functions which are pure in most cases makes it easy to plug them together in new ways, remove a certain step or add another one. Testing is easy as well, given that Clojure works with data most of the time.</p><p>And, before the argument comes up: Sure, just having (pure) functions doesn‚Äôt protect you from a messy code base. You can have unreadable, untraceable code in almost any language. But my personal feeling is that by sticking to small functions and trying to keep them pure goes a long way towards good software.</p><p>The Clojars repository contains many packages and I haven‚Äôt had any problems finding the libraries I needed throughout the year. Having the possibility to add Maven dependencies or Jar files if no Clojure library is available adds to the ecosystem as well. Using Java libraries isn‚Äôt as smooth as the ones written in Clojure, but that‚Äôs mostly due to the underlying differences in thinking than a shortcoming of Clojure. And even though it sometimes feels weird, it works quiet well.</p><h2>The community</h2><p>Clojure has a small, nice community. You can feel the excitment about the language at our local Usergroup as well as when talking about Clojure at conferences and with fellow developers. Many times I had people jumping in to help me with my problems and being nice. I also don‚Äôt feel like I am looked down on or anything if I don‚Äôt understand a certain concept. In languages like Haskell I always felt a little stupid for not knowing how to solve a certain problem ‚Äúthe functional way‚Äù. I didn‚Äôt have this feeling in Clojure.</p><p>As with any other small language, having a small community has drawbacks. Sometimes, you come across a problem nobody ever had. This is rare in the big languages as almost everything has been done. Sometimes, you are looking around and while it seems others have solved the problem, they didn‚Äôt openly discuss it. Again, it happens because of the smaller amount of people around.</p><p>Additionally, the opinion of a few does make a lot more noise in a small community. It did show recently as a negative blog post hit Hackernews and reddit and the community started discussing. I don‚Äôt think a post like this would hit the Javascript or Python community as hard. With this in mind, it becomes even more crucial to try to discuss in a civil manner than to attack. People are spending their free time so we all can benefit. Even if you don‚Äôt like or don‚Äôt agree, showing some decency and respect for the work goes a long way.</p><h2>Getting payed</h2><p>Beside Blossom, I do some freelancing and while I‚Äôd love to use Clojure there as well, I wasn‚Äôt able to find any opportunities yet. The market for Clojure developers seems small. I was surprised to see some Clojure job posts on Upwork and have applied there, without much success yet.</p><p>In Vienna, there are some companies using Clojure for their products. I am excited for their success stories and the inspiration for other companies to make the bold move and invest in a rather small language. I feel that with the Java interoperability the risks of such a move are minimized.</p><p>Should you drop everything else and learn Clojure? I don‚Äôt think so. Make sure to experiment with Clojure. If you like it and if you feel you could be more productive, try to incorporate it into existing projects or new ones. But don‚Äôt just try Clojure. See if Erlang/Elixir is for you, if you can get more done with another ‚Äúbig‚Äù language or if you are still happy with your language of choice.</p><p>I don‚Äôt see Clojure as a game changer, just as a nicer, cleaner way to express intend. But that‚Äôs a lot of what a language should foster, right?</p> ]]></description>
            <pubDate>Mon, 23 Oct 2017 10:00:00 +0000</pubDate>
            <link>https://sgoettschkes.me/p/my-personal-state-of-clojure.html</link>
            <guid isPermaLink="true">https://sgoettschkes.me/p/my-personal-state-of-clojure.html</guid>
            <category><![CDATA[ dev ]]></category>
            <dc:creator><![CDATA[ Sebastian ]]></dc:creator>
        </item>
      
        <item>
            <title><![CDATA[ (clojure 2) Getting used to ]]></title>
            <description><![CDATA[ <p>After ‚Äú<a href="http://sgoettschkes.me/p/clojure-0-the-setup.html">The setup</a>‚Äú and ‚Äú<a href="http://sgoettschkes.me/p/clojure-1-the-beginning.html">The beginning</a>‚Äú, my time with Clojure was somewhat limited due to pre-christmas stress. But this gave me time to reflect on what I learned so far, what I liked and didn‚Äôt like. I also attended the December Meetup by <a href="https://www.meetup.com/clojure-vienna/">(clojure ‚Äòvienna)</a> and pair programmed Clojure for a few hours.</p><h2>The ecosystem</h2><p>I already said I liked the way Leiningen worked. Nothing has changed here. Leiningen feels stable and works great. I didn‚Äôt come across any issues using it, which is a great way for a language to work.</p><p>I didn‚Äôt find an editor/IDE I liked yet. I started with vim because it is what I know and universal enough. I also set up <a href="https://atom.io/">Atom</a> and use it but don‚Äôt really like it. My biggest problem right now is that Clojure and Leiningen are installed inside a virtual machine, making many tools unusable. I‚Äôd love to be able to evaluate statements from my editor directly by running them inside the vm but it turns out that‚Äôs a bit of a problem. There are tools to do that, but the setup needed is just to much.</p><p>My current workflow is writing code in Atom, running it sshd into the vm and also having an additional ssh session running with the Leiningen repl started to test out different things.</p><h2>The workflow</h2><p>Programming in a functional lanuage is just different then using a procedural language. It‚Äôs more about passing data around and rearrange it instead of maintaining a global state. It‚Äôs true that it‚Äôs much easier to reason about a small part of the software as the input and output is defined and can be tested.</p><p>When pairing on Day 9 of Advent of Code, my coding partner who is also new to Clojure mentioned that he can‚Äôt see himself working in the language due to this being so different than what he‚Äôs used to from other languages (mainly Java). While I understand what he means I honestly think that it‚Äôs not better or worse but different. It takes time to get used to it.</p><p>One thing I noticed was that testing was very easy because you can always split up big function into smaller ones, making them easily testable. It was also easy to reason about the different parts. The only hard thing was to put together the plan on how to get started and which path to take. But this discussion was useful and it was good to have it in the beginning instead of moving along and ‚Äújust doing things‚Äù.</p><h2>The current status</h2><p>The last weeks have been busy, so I didn‚Äôt dive deeper into Clojure. My next step is taking a book and working through it while on christmas holiday. After using Clojure in practice and learning a ton I feel like a bit more theoretical understanding would be good at this point.</p><p>I‚Äôd also like to write a small app in Clojure to see what this feels like. Advent of Code, Project Euler and others are great but they don‚Äôt mimic the real world. I realized with Advent of Code that I spent most of the time figuring out the algorithm, which does not help me getting any further with Clojure.</p><h2>The meta</h2><p>Beside working with Clojure, I also watched a few talks by Rich Hickey. I like his ideas and got the feeling his one of those people not buying into hype and ‚Äúbest practice‚Äù but asking hard questions and thinking for himself. I might not agree with everything he says and don‚Äôt agree with every decision in Clojure, but overall he seems very reasonable. That‚Äôs more than enough for me to get behind Clojure.</p><p>The next update will most likely on the book I chose to work through and what I learned. And it might only get here after my holiday, so enjoy the holidays, relax and stay tuned :)</p> ]]></description>
            <pubDate>Wed, 21 Dec 2016 10:00:00 +0000</pubDate>
            <link>https://sgoettschkes.me/p/clojure-2-getting-used-to.html</link>
            <guid isPermaLink="true">https://sgoettschkes.me/p/clojure-2-getting-used-to.html</guid>
            <category><![CDATA[ dev ]]></category>
            <dc:creator><![CDATA[ Sebastian ]]></dc:creator>
        </item>
      
        <item>
            <title><![CDATA[ (clojure 1) The beginning ]]></title>
            <description><![CDATA[ <p>After ‚Äú<a href="http://sgoettschkes.me/p/clojure-0-the-setup.html">The setup</a>‚Äú, I dove right into Clojure. As said before, I want to get to know Clojure by working on <a href="http://adventofcode.com/">Advent of Code</a> (AoC). I realize that coding puzzles and dojos and katas are not real world applications and one might miss certain things like performance or running an application in production. But they are small enough to provide fast feedback and to not hit a big wall. Even if I am not able to solve one, I can always skip that and keep going with another puzzle.</p><h2>lein run &amp; lein test</h2><p>Before starting with real code, I created a project for AoC. <code class="inline">lein new adventofcode</code>, ran in the <code class="inline">/vagrant</code> folder inside my Vagrant vm created a scaffold of a Clojure project the way Leiningen decided it should be. Within this directory, the program can be run by <code class="inline">lein run</code> and tested with <code class="inline">lein test</code>.</p><p>I was again surprised by how easy this was. Everything works out of the box, no changes needed. The test fails, but that‚Äôs expected.</p><p>And if you want to play with Clojure a bit before writing real code, a quick <code class="inline">lein repl</code> brings up a nice repl you can use to get a feeling for the syntax.</p><h2>Advent of Code, Day 1</h2><p>Right after that first few minutes, I got into the code. Looking at the first day of AoC, it seemed plausible to see if I could get the input for the puzzle by downloading the file. A quick google search later it seemed fairly easy: Add a dependency to the code, use the library to request a url and get a string back. Adding the dependency is one line in the <code class="inline">project.cls</code>, requiring it is one more line and doing the request is again one line. That‚Äôs three lines. I was hooked!</p><p>Leiningen detects changes in the dependencies and downloads everything automatically once you run <code class="inline">lein run</code> or any other Leiningen command. I added all my code to the <code class="inline">core.clj</code> file because I didn‚Äôt want to figure out how to best distribute code between many files. I usually focus on one thing at a time when learning a new language!</p><p>Sadly, my code didn‚Äôt work. The reason was that the puzzle input needs login. I quickly decided that this would be to much of a hassle and put the puzzle input into a local txt file. Reading this file, I found the <code class="inline">slurp</code> function available in the clojure core which reads a file to a string. Again, very easy. It would be a problem with very big files but for now this was fine.</p><p>Solving the first day was a succession of this steps: Google for an isolated problem, find a function or way to solve it, continue.</p><h2>Error messages</h2><p>While solving the first day, it became clear to me that Clojure error messages are horrible. Seriously, the are the worst messages I have ever seen. Usually, they are just a Stack Trace from an Exception. Sometimes, they point to a specific line somehwere in there and sometimes it doesn‚Äôt even mention your code at all.</p><p>It took way longer than needed because I had a weird error I couldn‚Äôt solve because I had no idea where to look. I looked at every piece of the code and after I already though the compiler was wrong I found the tiny little error.</p><p>A lot fo errors are EOF problems because on of the many closing paranthesis is missing. Again, there is no real hint where this is so you again are on your own counting paranthesis.</p><h2>Done</h2><p>It took me maybe 3 hours to get both parts of the puzzle for day 1. Given Clojure is a completly new language for me and I had a few problems along the way, I guess this is an ok time spawn. I had a misunderstanding in the puzzle which took some time as well, so overall I was pretty happy.</p><p>I‚Äôll keep my impressions of the language for now and will get into them when I‚Äôm a little further down the road!</p> ]]></description>
            <pubDate>Thu, 08 Dec 2016 20:00:00 +0000</pubDate>
            <link>https://sgoettschkes.me/p/clojure-1-the-beginning.html</link>
            <guid isPermaLink="true">https://sgoettschkes.me/p/clojure-1-the-beginning.html</guid>
            <category><![CDATA[ dev ]]></category>
            <dc:creator><![CDATA[ Sebastian ]]></dc:creator>
        </item>
      
        <item>
            <title><![CDATA[ (clojure 0) The setup ]]></title>
            <description><![CDATA[ <p>In the last week I started playing with <a href="https://clojure.org/">Clojure</a>. The reason for this are some upcoming projects with the blossom Team. The stack will most likely be Clojure in the backend and <a href="https://clojurescript.org/">ClojureScript</a> in the frontend. So I better up my game. I started with the <a href="http://adventofcode.com/">Advent of Code</a> to have some real world exposure and not just write complicated ‚ÄúHello, World‚Äù code. I‚Äôm planning on writing a series of blog posts, documenting my journey.</p><h2>Vagrant</h2><p>People who know me knew this was coming. I start every project in a clean vm managed by <a href="https://www.vagrantup.com/">Vagrant</a> to not clutter my laptop, remove stuff without a trace and not get caught in some weird dependency hell. I also got a vagrant setup for learning new stuff which is usually my go-to project when working on things like ‚ÄúAdvent of Code‚Äù.</p><p>So the first step for me was to add Clojure to the tech stack inside the Vagrant machine. To be honest, I expected some problems. There usually are. The only real easy setup I ever had was Dart, wehre downloading the zip and extracting it is all you really need. With clojure, it was almost as easy. Make sure Java is installed, download the leiningen script, make sure it‚Äôs executable and in the path, done.</p><h2>Clojure and Leiningen</h2><p><a href="http://leiningen.org/">Leiningen</a> to me feels like a package manager on steriods and I love it. Using Leiningen to install Clojure is pure joy because it does it automatically. No need to figure anything out on your own. And it just works. I never installed something explicitly. If I add a dependency to my <code class="inline">project.clj</code> and run or test the project, Leiningen discovers the change and installs it automatically. I‚Äôm still amazed by how easy it feels to work with Leiningen.</p><p>Leiningen also creates a new project scaffolding if you need it. Perfect for newcomers who have no idea how a project setup in Clojure looks like <code class="inline">lein new PROJECTNAME</code> and lein got you covered. You can use Leiningen to run the project, test it and build it as needed.</p><h1>Tests included</h1><p>The new project also includes an incomplete test, urging you to fix it. This is great because it makes sure there is a working test setup included in the scaffolding make it easier to get started with tests. Nobody can be forced to write tests, but the easier it is to get started the more likely developers are to pick it up. And it‚Äôs more fun as well!</p><p>In the next part I‚Äôll talk about the first Advent of Code solutions as well as my feeling about Clojure after working with it a bit. Stay tuned ;)</p> ]]></description>
            <pubDate>Mon, 05 Dec 2016 13:00:00 +0000</pubDate>
            <link>https://sgoettschkes.me/p/clojure-0-the-setup.html</link>
            <guid isPermaLink="true">https://sgoettschkes.me/p/clojure-0-the-setup.html</guid>
            <category><![CDATA[ dev ]]></category>
            <dc:creator><![CDATA[ Sebastian ]]></dc:creator>
        </item>
      
        <item>
            <title><![CDATA[ An experiment ]]></title>
            <description><![CDATA[ <p>In the upcoming weeks, I‚Äôd like to do an experiment involving Pokemon Go and the in-game currency Pokecoins. In short: I‚Äôll work with a specific client for 2 hours each week doing my usual work and I‚Äôll use the resulting money to buy Pokecoins. This work will be done on top of my current work.</p><h2>Client needed</h2><p>I am currently looking for a new client I can work with. There are a few requirements that need to be met in order to be a fit:</p><ul><li>I‚Äôll only work for 2 hours/week with this client</li><li>The work is done async</li></ul><p>Ideal work would be:</p><ul><li>Small development work which isn‚Äôt time critical (PHP, Python, Dart, Javascript)</li><li>Code review and/or overall codebase check (PHP/Python only)</li><li>DevOps work like setting up a vagrant environment or improving an existing Ansible setup</li></ul><p>As statet in the title, this is an experiment, which means that I‚Äôll work on a rate that is lower than my usual hourly rate. Other than that, the client can expect my full commitment and my usual high quality work. If you know any company/person who would be interested in this, please forward my contact info which can be found at <a href="http://agileaddicts.com">http://agileaddicts.com</a>!</p><h2>The experiment</h2><p>The Pokemon Go hype got me! I‚Äôm not playing as much as a month ago (which might be because I was on holiday back then), but I invest quiet some time into the game. If you are not familiar with the game, it‚Äôs essentially running around with your mobile phone and catching Pokemon that pop up. You can also fight with your Pokemon in gyms, which gives you a reward (Pokecoins) which you can then use to buy additional items. You can also buy Pokecoins for real money. 100 Pokecoins cost 1‚Ç¨ and it takes me about 1 1/2 hour to get 100 Pokecoins, which is also the maximum for one day (21 hours to be exact).</p><p>Doing the math, it‚Äôs insane to spent over 1 hour to ‚Äúearn‚Äù something which is worth 1‚Ç¨. On the other hand, I play other games for hours which do not give me any ‚Äúreward‚Äù and I do watch Netflix and I do various other activities which actually cost me money.</p><p>And this is where my experiment comes in. I‚Äôd like to use the money from the 2 hours a week on Pokecoins and see if this changes my experience. I didn‚Äôt spent any money on the game yet which means I can directly compare the two ways of playing. I‚Äôll also make sure to reduce my playing time by 2 hours, so those 2 hours won‚Äôt come out of my sleeping time or other activities.</p><p>I expect that the two hours working will increase my Pokemon Go experience. The amount of coins will be a lot more than I could get in-game and can be used to make up for the two hours ‚Äúlost‚Äù working instead of playing. Of course, there is the possibility that I‚Äôd rather play to earn those coins than work. Or it could be that not much changes.</p><p>I‚Äôll of course update my blog with results!</p> ]]></description>
            <pubDate>Wed, 14 Sep 2016 07:00:00 +0000</pubDate>
            <link>https://sgoettschkes.me/p/an-experiment.html</link>
            <guid isPermaLink="true">https://sgoettschkes.me/p/an-experiment.html</guid>
            <category><![CDATA[ freelance ]]></category>
            <dc:creator><![CDATA[ Sebastian ]]></dc:creator>
        </item>
      
        <item>
            <title><![CDATA[ Idempotent version updates with Ansible ]]></title>
            <description><![CDATA[ <p>If you are a seasoned Vagrant user, you know the problem around provisioning. If some software version changes, everybody needs to provision his or her machine again. Otherwise, things will fail eventually. You‚Äôll also run into problems if running the provisioning twice fails for some reason (e.g. because a file already exists somewhere).</p><h2>Idempotent setup</h2><p>If you are setting up your provisioning, the first thing you need to make sure is that you can run the setup steps more than once and it works without manual steps in between. Nothing is more frustrating than running <code class="inline">vagrant provision</code> and being left with errors because something is already installed or a file is already at a specific place.</p><p>This is easy to do, even with a basic shell provisioner. You can check for the existence of files and test if some software is already installed. It‚Äôs also pretty easy to test: Just run the provisioning again and see if it works. If not, add appropriate tests and not run the offending commands.</p><h2>Updating vs. optimizing</h2><p>Getting the provisioning step to update software to the correct version is more tricky. It‚Äôs easy with package managers like composer for PHP or pip for Python where you have a file containing all dependencies and their versions and the package manager takes care of the rest. If you need to download, compile and install a library, you are faced with three very different options: You can do all the steps every time when provisioning, which takes time even though most of the time nothing changed. You can also install it once and then forget about it, which means nothing happens if a new version for a software is available. The third thing is figuring out the current version as well as the target version and only run the steps for installing it if they don‚Äôt match.</p><p>With Ansible, the Vagrant provisioner of choice for me, all three ways are possible. It‚Äôs important to be clear which one you are choosing so you know what drawbacks your solution might have.</p><p>To run some steps every time, give them no restriction like <code class="inline">creates</code> for commands and Ansible will do as told. If you are using the <code class="inline">command</code> or <code class="inline">shell</code> module, Ansible will run it every time. If your process is downloading some tar or zip and extracting it, maybe running a setup command as well, Ansible will download it every time and you‚Äôll get new versions available under the url.</p><p>If you wanna run the whole process only once , use <code class="inline">creates</code> or similar instructions. Ansible will check if the file or directory is there and if it is, skip the step. As an example, let‚Äôs say you download some tar and extract it somewhere. The <code class="inline">unarchive</code> module takes a parameter called <code class="inline">creates</code>. If you set it to the extracted path, the command will do nothing if that folder is already there. As Ansible can‚Äôt possible figure out if the version inside the tar is the same as the existing one, it won‚Äôt unarchive it even though the version changed.</p><h2>Conditionals</h2><p>If you want to run a command or a set of commands only if the installed version of a software differs from the target version, things are getting interesting. Let me walk you through that scenario. As an example, I‚Äôll use the Dart SDK.</p><p>First, we need a command to get the current version installed. For Dart, that‚Äôs reading the <code class="inline">version</code> file which contains only the version string. Other tools might make this more complicated, e.g. the Google Cloud SDK, which prints a lot of information in addition to the version when running <code class="inline">gcloud --version</code>. I usually use some command line magic like <code class="inline">sed</code> or <code class="inline">cut</code> to extract the part I need. Using the <code class="inline">shell</code> module from ansible, I pipe them together to end up with the version being the stdout for that command. We need to use <code class="inline">register</code> to put the output of that task into a variable. The whole task could look like this:</p><pre><code>- name: Read the dart version
  shell: cat /usr/local/lib/dart-sdk/version
  register: current_dart_version
  ignore_errors: True
  changed_when: dart_version != current_dart_version.stdout</code></pre><p>As you can see, I ignore errors because the shell command might fail if dart is not installed. I use <code class="inline">changed_when</code> because I like a clean output from Ansible. You can also see a variable named <code class="inline">dart_version</code> which I did not mention yet. It‚Äôs simply a variable keeping the target dart version.</p><p>Next, let us download the Dart SDK if needed:</p><pre><code>- name: download dart sdk
  get_url:
    dest=/tmp/dartsdk.zip
    force=yes
    url=https://storage.googleapis.com/dart-archive/channels/stable/release/{{ dart_version }}/sdk/dartsdk-linux-x64-release.zip
  when: dart_version != current_dart_version.stdout</code></pre><p>Again, we use the <code class="inline">dart_version</code> as a target both in the url and for the <code class="inline">when</code> clause which compares the stdout from the above command with our target. The last step is to extract the zip:</p><pre><code>- name: extract dart sdk
  unarchive:
    copy=no
    dest=/usr/local/lib
    src=/tmp/dartsdk.zip
  when: dart_version != current_dart_version.stdout</code></pre><p>The same pattern repeats here as well. We only run the command if the target version is different from the current one. You can use this pattern for all kinds of installation and steps performed after the installation is done.</p><h2>Getting fail-safe</h2><p>Even though this seems very much all you can want from a provisioning step, if you have to take care of real servers in production, you might want to be even more cautious. In the example above, if some files are not present in the new SDK, they are not deleted as the extract commands does not take care of this. We could work around this by first deleting the SDK.</p><p>In production, it might be valuable to not just replace a version but have two versions installed and switch a symlink or something to change over. This way, it‚Äôs not possible that a process has access to the software in an unpredictable state.</p><p>One tip regarding the version extraction: There are different ways to read the version! You might be able to read the version from some version-file or run the command with a <code class="inline">COMMAND --version</code> parameter. Look for different ways and see if some outputs only the exact version. And if you have to, using some regex with <code class="inline">sed</code> might not be the cleanest way but it does the job.</p> ]]></description>
            <pubDate>Mon, 29 Feb 2016 10:00:00 +0000</pubDate>
            <link>https://sgoettschkes.me/p/idempotent-version-updates-with-ansible.html</link>
            <guid isPermaLink="true">https://sgoettschkes.me/p/idempotent-version-updates-with-ansible.html</guid>
            <category><![CDATA[ dev ]]></category>
            <dc:creator><![CDATA[ Sebastian ]]></dc:creator>
        </item>
      
        <item>
            <title><![CDATA[ Dart, Vagrant and IDEs ]]></title>
            <description><![CDATA[ <p>Using <a href="https://www.vagrantup.com">Vagrant</a> in order to have a reproducible development environment is second nature to me. All projects I work on have a <code class="inline">Vagrantfile</code> and it usually works great.</p><h2>Packages and your IDE</h2><p>One of the biggest problems when running your code inside a virtual machine is the IDE, at least for me. The code lives on my host machine and is synced into the vm, so I use an editor or IDE on my host. I might not have the needed dependencies on my host machine, so the IDE struggles to provide code completion (among other features which only work when the IDE can inspect the libraries used).</p><p><a href="https://www.jetbrains.com/pycharm">PyCharm</a> (and many other JetBrains IDEs) has the ability to use a remote interpreter for Python. Pointing it to the Vagrant machine, PyCharm will ssh into the virtual machine and get the interpreter as well as all libraries installed through pip from there. This works rather well, so even though I don‚Äôt have flask installed on my host, I have code completion for the flask API and PyCharm tells me if I am missing an argument. If I use Python 3 for my project and it‚Äôs installed in the vm, I don‚Äôt need it on my host at all (In fact, I don‚Äôt need any Python installed, which is nice if you happen to develop on Windows).</p><h2>Dart and the packages symlinks</h2><p>The Dart plugin for the JetBrains IDEs does not have such a feature. It relies on the Dart SDK installed on your host. I wouldn‚Äôt mind installing Dart, but there are some problems:</p><ul><li>Different projects might use different versions of the Dart SDK. Keeping different versions of the SDK is tedious.</li><li>pub, the Dart package manager, downloads packages to <code class="inline">~/.pub-cache</code>. All dependencies need to be downloaded twice to be available inside the vm (to execute the code) and on the host (so the IDE can access it). You could sync your local <code class="inline">pub-cache</code> folder into the vm to get around this issue.</li><li>pub creates symlinks in your project to reference packages. In your project root, it creates a <code class="inline">packages</code> folder which contains symlinks to each package. The paths are absolute, so each time you run it inside the vm, it breaks the lookup on the host and vice verse.</li></ul><p>I didn‚Äôt find a solution to my first problem, but could solve the other two!</p><h2>.packages to the rescue</h2><p>As far as the <code class="inline">.pub-cache</code> folder is concerned, there is a third solution beside downloading twice and syncing your pub cache: pub looks up the <code class="inline">PUB_CACHE</code> environment variable and if it contains a valid path, it puts the dependencies there. This way, you can store all your dependencies in your project root in a <code class="inline">.pub-cache</code> (or whatever you wanna call it) folder. It‚Äôs synced to your host automatically, so no need to install the same libraries twice.</p><p>The symlinks are a bigger problem, but if you are using Dart 1.12 or higher, there is a way around. By using <code class="inline">--no-package-symlinks</code> as an argument to <code class="inline">pub get</code> ( or <code class="inline">pub upgrade</code>), no symlinks are created. Instead, a single <code class="inline">.packages</code> file is used to store all links for the packages needed. Sadly, this links are again absolute. But with a little bit of <a href="https://github.com/agileaddicts/blitzlicht/blob/affac199cdab1154d66eb327696d26eb19d6b6cc/tool/grind.dart#L77-L80">Dart magic</a> (ok, regex magic), you can change those to be relative and work both on the vm and the host.</p><p>If you are using Dart before 1.12, you can of course try to rewrite the symlinks which might work as well!</p><h2>The rough edges</h2><p>Because the <code class="inline">PUB_CACHE</code> environment variable needs to be set correctly, I only run <code class="inline">pub get</code> and <code class="inline">pub upgrade</code> inside the vm where my provisioning takes care of putting everything in place. On my host, the <code class="inline">PUB_CACHE</code> might point to a different project, messing everything up.</p><p>One also needs to remember to run <code class="inline">pub get</code> with the correct argument and running the script to replace the links to be relative. If you are using some task runner (like <a href="https://pub.dartlang.org/packages/grinder">grinder</a>), this is no issue as you have your task and it takes care of doing all the steps needed. If you are still running tasks manually, well, you might want to consider using a task runner.</p><h2>The state of packages managers</h2><p>While this was intended as a practical post about Dart in the vm and IDEs, there is an underlying question: Why is it so complicated? Turns out that package management is complicated. Every package manager I have worked with has some problems. NPM (for Node.js) downloads every dependency once for each library that depends on it. There is no sharing going on, even if two libraries in one project depend on the exact same version.</p><p>pip (for Python) and gem (for ruby) install packages globally and rely on external solutions (or workarounds) to install dependencies locally for every project. composer (for PHP) installs everything locally but only once, making it the best package manager I worked with in the past. If you work on a lot of projects and all depend on the same set of libraries, there is a certain overhead in downloading those libraries for each project though!</p><p>pub seems to take into account all those problems: it installs each version needed of each library globally (if you don‚Äôt mess with the <code class="inline">PUB_CACHE</code>), which means you can have different projects use different versions of the same library OR use the same library without storing it twice. Of course, within one project you can only use one version of each library, so ‚Äúdependency hell‚Äù is still possible.</p><h2>The perfect solution?</h2><p>The best solution would of course be if the Dart plugin could use a remote SDK. I doubt this will come anytime soon (I didn‚Äôt see anybody ranting about it anyway). The solution outlined above should also work with any IDE capable of using the <code class="inline">.packages</code> file for Dart.</p><p>Having a working solution in place makes working on Dart projects which run inside a Vagrant vm much nicer. You should try it!</p> ]]></description>
            <pubDate>Thu, 21 Jan 2016 10:00:00 +0000</pubDate>
            <link>https://sgoettschkes.me/p/dart-vagrant-and-ides.html</link>
            <guid isPermaLink="true">https://sgoettschkes.me/p/dart-vagrant-and-ides.html</guid>
            <category><![CDATA[ dev ]]></category>
            <dc:creator><![CDATA[ Sebastian ]]></dc:creator>
        </item>
      
  </channel>
</rss>
